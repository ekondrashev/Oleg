This class shows a technique to determine a thread caller. 
The source is http://stackoverflow.com/questions/6364849/can-i-get-the-name-of-the-class-and-method-within-which-the-current-thread-was-sp


Run using the following options:

using string comparison:

java -DStackDumpSM.logLevel=2 -DStackDumpSM.includeCreateThread="ThreadCaller#c" -DStackDumpSM.excludeCreateThread="ThreadCaller#a" -Djava.security.policy=grant-everything.policy -Djava.security.manager=StackDumpSecurityManager ThreadCaller 

java -DStackDumpSM.includeWriteFile="output" -DStackDumpSM.excludeWriteFile="output2" -Djava.security.policy=grant-everything.policy -Djava.security.manager=StackDumpSecurityManager FileWrite



or regex:

java -DStackDumpSM.logLevel=2 -DStackDumpSM.includeCreateThread="{.*?ThreadCaller#c.*}" -DStackDumpSM.excludeCreateThread="{.*?ThreadCaller#a.*}" -Djava.security.policy=grant-everything.policy -Djava.security.manager=StackDumpSecurityManager ThreadCaller 

java -DStackDumpSM.includeWriteFile="{.*?output.*}" -DStackDumpSM.excludeWriteFile="{.*?output2.*}" -Djava.security.policy=grant-everything.policy -Djava.security.manager=StackDumpSecurityManager FileWrite



where grant-everything.policy may contain:
grant {
    permission java.security.AllPermission "", "";
};



To run in jboss put the following lines in the run.bat

rem the following line allows connecting jconsole to the jboss
set JAVA_OPTS=%JAVA_OPTS% -Dcom.sun.management.jmxremote

set JBOSS_CLASSPATH=%JBOSS_CLASSPATH%;%JBOSS_HOME%\server\default\lib\StackDumpSM.jar

set JAVA_OPTS=%JAVA_OPTS% -Djava.security.manager=StackDumpSecurityManager
rem set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.traceElementSeparator="*+*"
rem set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.logLevel=2
set JAVA_OPTS=%JAVA_OPTS% -Djava.security.policy=%JBOSS_HOME%/bin/grant-everything.policy

rem with strings comparison

set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.includeCreateThread="lysis"
set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.excludeCreateThread="AbstractPollingService$TimerListener#handleNotification"
set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.includeWriteFile=""
set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.excludeWriteFile="server/default/data;server/default/tmp;server/default/work;server/default/log"
set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.includeDeleteFile=""
set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.excludeDeleteFile="server/default/data;server/default/tmp;server/default/work;server/default/log"

rem set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.includeAccept=""
rem set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.excludeAccept=""
rem set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.includeConnect=""
rem set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.excludeConnect=""
rem set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.includeListen=""
rem set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.excludeListen=""

set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.includeMulticast=""
rem set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.excludeMulticast=""
set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.includeSetFactory=""
rem set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.excludeSetFactory=""
set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.includeExec=""
rem set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.excludeExec=""
rem set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.includeLink=""
rem set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.excludeLink=""


rem with regular expressions

set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.includeCreateThread="{.*?lysis.*}"
set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.excludeCreateThread="{.*?AbstractPollingService\$TimerListener#handleNotification.*}"
set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.includeWriteFile="{.*}"
set JAVA_OPTS=%JAVA_OPTS% -DStackDumpSM.excludeWriteFile="{.*?server/default/data.*;.*?server/default/tmp.*;.*?server/default/work.*;.*?server/default/log.*}"




server.policy may contain totally permissive policy

grant {
    permission java.security.AllPermission "", "";
};

------------------------------------------------------------

The StackInterceptor.java demonstrates a usage of InheritableThreadLocal. I don't know how to use it if a source of main() is not available. 

import java.util.Arrays;

public class StackInterceptor extends InheritableThreadLocal<StackTraceElement[]>{

    public static final StackInterceptor instance;
    static{
        instance = new StackInterceptor();
        instance.set(new Throwable().getStackTrace());
    }

    @Override
    protected StackTraceElement[] childValue(StackTraceElement[] parentValue) {
        return new Throwable().getStackTrace();
    }

    //test//
    public static void main(String[] args) {
        Runnable r= new Runnable(){
            @Override
            public void run() {
                System.out.printf("%s - creation stack: %s%n", Thread.currentThread(), Arrays.toString(instance.get()).replace(',', '\n'));
            }           
        };

        Thread t1 = new Thread(r, "t1");
        //spacer
        Thread t2 = new Thread(r, "t2");
        t1.start();
        t2.start();     
    }
}